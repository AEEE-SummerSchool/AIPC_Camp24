##
##  © Copyright 2022 – 2023 Advanced Micro Devices, Inc. All rights reserved.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##  http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##

import sys

import glog as log
import numpy as np
from voe.pattern import node, wildcard, xir_const_op
from voe.rule_ext import Rule, same_as

"""
  test case model 1

  merge fix pass
  From : fix2float(float2fix(input))
  To  : fix(input)
"""


class MergeFix(Rule):
    def pattern(self):
        float2fix = node("com.xilinx:float2fix", wildcard())
        fix2float = node("com.xilinx:fix2float", float2fix)
        return fix2float.build(locals())

    def action(self, float2fix, fix2float, **_others):
        return self.create_node(
            op_type="com.xilinx:fix",
            inputs=same_as(float2fix),
            attrs=same_as(float2fix),
            anchor_point=fix2float,
        )


class MergeFix2(Rule):
    def pattern(self):
        input = wildcard()
        y_scale = xir_const_op()
        float2fix = node("QuantizeLinear", input, y_scale, wildcard())
        fix2float = node("com.xilinx:fix2float", float2fix)
        return fix2float.build(locals())

    def action(self, input, y_scale, float2fix, fix2float, **_others):
        return self.create_node(
            op_type="com.xilinx:fix",
            inputs=[input],
            attrs=same_as(fix2float),
            anchor_point=fix2float,
        )


def rules():
    return [MergeFix(), MergeFix2()]
