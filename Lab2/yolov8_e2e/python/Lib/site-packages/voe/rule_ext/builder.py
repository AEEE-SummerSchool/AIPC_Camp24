##
##  © Copyright 2022 – 2023 Advanced Micro Devices, Inc. All rights reserved.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##  http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##

from .node import Node


class Builder(object):
    def __init__(self, cpp_node_builder):
        self._builder = cpp_node_builder

    def clone_op_type(self, node):
        return self._builder.clone_op_type(node.as_cpp_node())

    def set_op_type(self, op_type, domain):
        return self._builder.set_op_type(op_type, domain)

    def clone_data_type(self, node):
        return self._builder.clone_data_type(node.as_cpp_node_input())

    def set_data_type(self, data_type):
        return self._builder.set_data_type(data_type)

    def clone_shape(self, node):
        return self._builder.clone_shape(node.as_cpp_node_input())

    def set_shape(self, shape):
        return self._builder.set_shape(shape)

    def clone_inputs(self, node):
        return self._builder.clone_inputs(node.as_cpp_node())

    def clone_attrs(self, node):
        return self._builder.clone_attrs(node.as_cpp_node())

    def set_anchor_point1(self, node):
        return self._builder.set_anchor_point1(node.as_cpp_node())

    def set_anchor_point2(self, node, type):
        return self._builder.set_anchor_point2(node.as_cpp_node_input(), type)

    def set_anchor_point3(self, node, type, shape):
        return self._builder.set_anchor_point3(node.as_cpp_node(), type, shape)

    def set_input_args(self, inputs):
        return self._builder.set_input_args([i.as_cpp_node_arg() for i in inputs])

    def copy_attr(self, node, attr_name, node_attr_name):
        attr_value = node.attr(node_attr_name)
        return self._builder.set_attr(attr_name, attr_value)

    def set_attr(self, attr_name, attr_value):
        return self._builder.set_attr(attr_name, attr_value)

    def build(self, vaip_pass, graph):
        return Node(vaip_pass, graph, self._builder.build().as_node_input())
